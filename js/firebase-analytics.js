/**
 * Firebase analytics module for TicTacToeExtreme
 * This module handles tracking page views, unique visitors, and game events
 */
const Analytics = (function() {
    let db;
    let initialized = false;
    
    // Storage key for client ID
    const CLIENT_ID_KEY = 'tictactoeExtreme_clientId';
    
    // Initialize Firebase
    async function initialize() {
        if (initialized) return true;
        
        try {
            console.log('Initializing Firebase Analytics...');
            
            // Check if firebaseConfig is available
            if (typeof firebaseConfig === 'undefined') {
                console.error('Firebase config is not defined! Check if firebase-config.js is loaded.');
                return false;
            }
            
            console.log('Firebase config found:', JSON.stringify({
                projectId: firebaseConfig.projectId || 'missing',
                apiKeyLength: firebaseConfig.apiKey ? firebaseConfig.apiKey.length : 0
            }));
            
            // Initialize Firebase with config
            // Note: firebaseConfig is defined in the separate firebase-config.js file
            // that is generated by GitHub Actions from repository secrets
            firebase.initializeApp(firebaseConfig);
            
            // Initialize App Check with reCAPTCHA v3
            try {
                console.log('Initializing Firebase App Check...');
                if (typeof firebase.appCheck !== 'undefined') {
                    const appCheck = firebase.appCheck();
                    appCheck.activate(
                        '6LcSxfEqAAAAABGUgiC-rWMpnVmt8XWvvR-uu7Cu',
                        true // Set to true for debug tokens in non-production environments
                    );
                    console.log('Firebase App Check initialized successfully');
                } else {
                    console.warn('Firebase App Check function not available');
                }
            } catch (appCheckError) {
                console.error('Error initializing App Check:', appCheckError);
                // Continue execution even if App Check fails
            }
            
            db = firebase.firestore();
            
            // Test connection to Firestore
            try {
                await db.collection('test').doc('test').set({
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    test: true
                });
                console.log('Successfully wrote test document to Firestore');
            } catch (firestoreError) {
                console.error('Error writing to Firestore:', firestoreError);
                throw firestoreError;
            }
            
            initialized = true;
            console.log('Firebase Analytics initialized successfully');
            
            // Track the page view once initialized
            trackPageView();
            
            return true;
        } catch (error) {
            console.error('Failed to initialize Firebase:', error);
            return false;
        }
    }
    
    // Generate or retrieve client ID for tracking unique visitors
    function getClientId() {
        let clientId = localStorage.getItem(CLIENT_ID_KEY);
        if (!clientId) {
            clientId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
            localStorage.setItem(CLIENT_ID_KEY, clientId);
        }
        return clientId;
    }
    
    // Track page view
    async function trackPageView() {
        if (!initialized) {
            await initialize();
        }
        
        if (!initialized) return; // Skip if initialization failed
        
        try {
            const clientId = getClientId();
            const today = new Date().toISOString().split('T')[0];
            
            // Record daily visit
            await db.collection('metrics').doc('daily-counts').set({
                [today]: firebase.firestore.FieldValue.increment(1)
            }, { merge: true });
            
            // Record unique visitor (only count once per day per client)
            const visitorKey = `${today}_${clientId}`;
            const visitorRef = db.collection('visits').doc(visitorKey);
            const visitorDoc = await visitorRef.get();
            
            if (!visitorDoc.exists) {
                // First visit today from this client
                await visitorRef.set({
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    clientId: clientId,
                    date: today
                });
                
                // Increment unique visitor count
                await db.collection('metrics').doc('unique-daily').set({
                    [today]: firebase.firestore.FieldValue.increment(1)
                }, { merge: true });
            }
        } catch (error) {
            console.error('Error tracking page view:', error);
        }
    }
    
    // Track game events like game starts, completions, wins/losses
    async function trackGameEvent(eventType, eventData = {}) {
        if (!initialized) {
            await initialize();
        }
        
        if (!initialized) return; // Skip if initialization failed
        
        try {
            await db.collection('events').add({
                type: eventType,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                clientId: getClientId(),
                ...eventData
            });
        } catch (error) {
            console.error('Error tracking game event:', error);
        }
    }
    
    // Calculate win streak from game events
    async function calculateWinStreak() {
        try {
            // Get all completed games ordered by timestamp
            const gamesQuery = await db.collection('events')
                .where('type', '==', 'gameCompleted')
                .orderBy('timestamp', 'desc')
                .limit(20) // Limit to recent games for efficiency
                .get();
                
            let currentStreak = 0;
            let streakBroken = false;
            
            gamesQuery.forEach(doc => {
                const gameData = doc.data();
                
                if (!streakBroken) {
                    if (gameData.winner === 'player') {
                        currentStreak++;
                    } else {
                        streakBroken = true;
                    }
                }
            });
            
            return currentStreak;
        } catch (error) {
            console.error('Error calculating win streak:', error);
            return 0;
        }
    }
    
    // Get statistics for the stats modal
    async function getStatistics() {
        if (!initialized) {
            await initialize();
        }
        
        if (!initialized) return null; // Return null if initialization failed
        
        try {
            // Basic visit metrics
            const dailyCountsDoc = await db.collection('metrics').doc('daily-counts').get();
            const uniqueCountsDoc = await db.collection('metrics').doc('unique-daily').get();
            
            const dailyCounts = dailyCountsDoc.exists ? dailyCountsDoc.data() : {};
            const uniqueCounts = uniqueCountsDoc.exists ? uniqueCountsDoc.data() : {};
            
            // Calculate totals
            const totalVisits = Object.values(dailyCounts).reduce((sum, count) => sum + count, 0);
            const totalUniques = Object.values(uniqueCounts).reduce((sum, count) => sum + count, 0);
            
            // Get today's counts
            const today = new Date().toISOString().split('T')[0];
            const todayVisits = dailyCounts[today] || 0;
            const todayUniques = uniqueCounts[today] || 0;
            
            // Get all completed games
            const gamesQuery = await db.collection('events')
                .where('type', '==', 'gameCompleted')
                .get();
                
            const totalGames = gamesQuery.size;
            
            // Process game statistics
            let playerWins = 0;
            let computerWins = 0;
            let ties = 0;
            let playerWinsAsX = 0;
            let playerWinsAsO = 0;
            
            // AI style performance
            let aggressiveTotal = 0;
            let aggressiveWins = 0;
            let defensiveTotal = 0;
            let defensiveWins = 0;
            let balancedTotal = 0;
            let balancedWins = 0;
            
            gamesQuery.forEach(doc => {
                const gameData = doc.data();
                
                // Count outcomes
                if (gameData.winner === 'player') {
                    playerWins++;
                    
                    // Track symbol
                    if (gameData.playerSymbol === 'X') {
                        playerWinsAsX++;
                    } else if (gameData.playerSymbol === 'O') {
                        playerWinsAsO++;
                    }
                } else if (gameData.winner === 'computer') {
                    computerWins++;
                } else {
                    ties++;
                }
                
                // Track AI style performance if available
                if (gameData.aiStyle) {
                    switch (gameData.aiStyle) {
                        case 'aggressive':
                            aggressiveTotal++;
                            if (gameData.winner === 'computer') aggressiveWins++;
                            break;
                        case 'defensive':
                            defensiveTotal++;
                            if (gameData.winner === 'computer') defensiveWins++;
                            break;
                        case 'balanced':
                            balancedTotal++;
                            if (gameData.winner === 'computer') balancedWins++;
                            break;
                    }
                }
            });
            
            // Calculate win rates
            const playerWinRate = totalGames > 0 ? (playerWins / totalGames * 100).toFixed(1) : 0;
            const computerWinRate = totalGames > 0 ? (computerWins / totalGames * 100).toFixed(1) : 0;
            const tieRate = totalGames > 0 ? (ties / totalGames * 100).toFixed(1) : 0;
            
            // Calculate AI style win rates
            const aggressiveWinRate = aggressiveTotal > 0 ? (aggressiveWins / aggressiveTotal * 100).toFixed(1) : 0;
            const defensiveWinRate = defensiveTotal > 0 ? (defensiveWins / defensiveTotal * 100).toFixed(1) : 0;
            const balancedWinRate = balancedTotal > 0 ? (balancedWins / balancedTotal * 100).toFixed(1) : 0;
            
            // Calculate win streak
            const winStreak = await calculateWinStreak();
            
            return {
                // Site metrics
                totalVisits,
                totalUniques,
                todayVisits,
                todayUniques,
                
                // Win streak
                winStreak,
                
                // Game metrics
                totalGames,
                playerWins,
                computerWins,
                ties,
                playerWinRate,
                computerWinRate,
                tieRate,
                
                // Symbol performance
                playerWinsAsX,
                playerWinsAsO,
                
                // AI style performance
                aggressiveTotal,
                aggressiveWins,
                aggressiveWinRate,
                defensiveTotal,
                defensiveWins,
                defensiveWinRate,
                balancedTotal,
                balancedWins,
                balancedWinRate
            };
        } catch (error) {
            console.error('Error fetching statistics:', error);
            return null;
        }
    }
    
    // Public API
    return {
        initialize,
        trackPageView,
        trackGameEvent,
        calculateWinStreak,
        getStatistics
    };
})();